// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OlympicWords.Services;

#nullable disable

namespace OlympicWords.Migrations
{
    [DbContext(typeof(MasterContext))]
    [Migration("20221007035738_tst4")]
    partial class tst4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OlympicWords.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("EatenCardsCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("EnableOpenMatches")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastMoneyAimRequestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxWinStreak")
                        .HasColumnType("int");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OwnedBackgroundIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnedCardBackIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnedTitleIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("PlayedRoomsCount")
                        .HasColumnType("int");

                    b.Property<int>("RequestedMoneyAidToday")
                        .HasColumnType("int");

                    b.Property<int>("SelectedBackground")
                        .HasColumnType("int");

                    b.Property<int>("SelectedCardback")
                        .HasColumnType("int");

                    b.Property<int>("SelectedTitleId")
                        .HasColumnType("int");

                    b.Property<int>("TotalEarnedMoney")
                        .HasColumnType("int");

                    b.Property<int>("WinStreak")
                        .HasColumnType("int");

                    b.Property<int>("WonRoomsCount")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            EatenCardsCount = 0,
                            EnableOpenMatches = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 13,
                            MaxWinStreak = 0,
                            Money = 22250,
                            Name = "hany",
                            OwnedBackgroundIds = "[1,3]",
                            OwnedCardBackIds = "[0,2]",
                            OwnedTitleIds = "[2,4]",
                            PictureUrl = "https://pbs.twimg.com/profile_images/592734306725933057/s4-h_LQC.jpg",
                            PlayedRoomsCount = 3,
                            RequestedMoneyAidToday = 2,
                            SelectedBackground = 0,
                            SelectedCardback = 2,
                            SelectedTitleId = 0,
                            TotalEarnedMoney = 0,
                            WinStreak = 0,
                            WonRoomsCount = 4,
                            Xp = 806
                        },
                        new
                        {
                            Id = "999",
                            EatenCardsCount = 0,
                            EnableOpenMatches = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 7,
                            MaxWinStreak = 0,
                            Money = 1000,
                            Name = "botA",
                            OwnedBackgroundIds = "[0,3]",
                            OwnedCardBackIds = "[8]",
                            OwnedTitleIds = "[1]",
                            PictureUrl = "https://pbs.twimg.com/profile_images/723902674970750978/p8JWhWxP_400x400.jpg",
                            PlayedRoomsCount = 9,
                            RequestedMoneyAidToday = 0,
                            SelectedBackground = 0,
                            SelectedCardback = 1,
                            SelectedTitleId = 0,
                            TotalEarnedMoney = 0,
                            WinStreak = 0,
                            WonRoomsCount = 2,
                            Xp = 34
                        },
                        new
                        {
                            Id = "9999",
                            EatenCardsCount = 0,
                            EnableOpenMatches = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 8,
                            MaxWinStreak = 0,
                            Money = 1100,
                            Name = "botB",
                            OwnedBackgroundIds = "[3]",
                            OwnedCardBackIds = "[0,8]",
                            OwnedTitleIds = "[0,1]",
                            PictureUrl = "https://pbs.twimg.com/profile_images/592734306725933057/s4-h_LQC.jpg",
                            PlayedRoomsCount = 11,
                            RequestedMoneyAidToday = 0,
                            SelectedBackground = 0,
                            SelectedCardback = 2,
                            SelectedTitleId = 0,
                            TotalEarnedMoney = 0,
                            WinStreak = 0,
                            WonRoomsCount = 3,
                            Xp = 44
                        },
                        new
                        {
                            Id = "99999",
                            EatenCardsCount = 0,
                            EnableOpenMatches = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 8,
                            MaxWinStreak = 0,
                            Money = 0,
                            Name = "botC",
                            OwnedBackgroundIds = "[3]",
                            OwnedCardBackIds = "[0,8]",
                            OwnedTitleIds = "[0,1]",
                            PictureUrl = "https://d3g9pb5nvr3u7.cloudfront.net/authors/57ea8955d8de1e1602f67ca0/1902081322/256.jpg",
                            PlayedRoomsCount = 11,
                            RequestedMoneyAidToday = 0,
                            SelectedBackground = 0,
                            SelectedCardback = 2,
                            SelectedTitleId = 0,
                            TotalEarnedMoney = 0,
                            WinStreak = 0,
                            WonRoomsCount = 3,
                            Xp = 44
                        },
                        new
                        {
                            Id = "1",
                            EatenCardsCount = 0,
                            EnableOpenMatches = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 43,
                            MaxWinStreak = 0,
                            Money = 89000,
                            Name = "samy",
                            OwnedBackgroundIds = "[0,9]",
                            OwnedCardBackIds = "[0,1,2]",
                            OwnedTitleIds = "[11,6]",
                            PictureUrl = "https://d3g9pb5nvr3u7.cloudfront.net/authors/57ea8955d8de1e1602f67ca0/1902081322/256.jpg",
                            PlayedRoomsCount = 7,
                            RequestedMoneyAidToday = 0,
                            SelectedBackground = 0,
                            SelectedCardback = 1,
                            SelectedTitleId = 0,
                            TotalEarnedMoney = 0,
                            WinStreak = 0,
                            WonRoomsCount = 11,
                            Xp = 1983
                        },
                        new
                        {
                            Id = "2",
                            EatenCardsCount = 0,
                            EnableOpenMatches = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 139,
                            MaxWinStreak = 0,
                            Money = 8500,
                            Name = "anni",
                            OwnedBackgroundIds = "[10,8]",
                            OwnedCardBackIds = "[4,9]",
                            OwnedTitleIds = "[1,3]",
                            PictureUrl = "https://pbs.twimg.com/profile_images/633661532350623745/8U1sJUc8_400x400.png",
                            PlayedRoomsCount = 973,
                            RequestedMoneyAidToday = 4,
                            SelectedBackground = 0,
                            SelectedCardback = 4,
                            SelectedTitleId = 0,
                            TotalEarnedMoney = 0,
                            WinStreak = 0,
                            WonRoomsCount = 192,
                            Xp = 8062
                        },
                        new
                        {
                            Id = "3",
                            EatenCardsCount = 0,
                            EnableOpenMatches = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 4,
                            MaxWinStreak = 0,
                            Money = 3,
                            Name = "ali",
                            OwnedBackgroundIds = "[10,8]",
                            OwnedCardBackIds = "[2,4,8]",
                            OwnedTitleIds = "[1,3]",
                            PictureUrl = "https://pbs.twimg.com/profile_images/723902674970750978/p8JWhWxP_400x400.jpg",
                            PlayedRoomsCount = 6,
                            RequestedMoneyAidToday = 3,
                            SelectedBackground = 0,
                            SelectedCardback = 2,
                            SelectedTitleId = 0,
                            TotalEarnedMoney = 0,
                            WinStreak = 0,
                            WonRoomsCount = 2,
                            Xp = 12
                        });
                });

            modelBuilder.Entity("OlympicWords.Services.ExternalId", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalIds");
                });

            modelBuilder.Entity("OlympicWords.Services.UserPicture", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("AvatarId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserPictures");
                });

            modelBuilder.Entity("OlympicWords.Services.UserRelation", b =>
                {
                    b.Property<string>("FollowerId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FollowingId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("FollowerId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("UserRelation");

                    b.HasData(
                        new
                        {
                            FollowerId = "0",
                            FollowingId = "999"
                        },
                        new
                        {
                            FollowerId = "0",
                            FollowingId = "9999"
                        },
                        new
                        {
                            FollowerId = "0",
                            FollowingId = "99999"
                        });
                });

            modelBuilder.Entity("OlympicWords.Services.ExternalId", b =>
                {
                    b.HasOne("OlympicWords.Data.User", "User")
                        .WithMany("ExternalIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OlympicWords.Services.UserPicture", b =>
                {
                    b.HasOne("OlympicWords.Data.User", "User")
                        .WithOne("Picture")
                        .HasForeignKey("OlympicWords.Services.UserPicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OlympicWords.Services.UserRelation", b =>
                {
                    b.HasOne("OlympicWords.Data.User", "Follower")
                        .WithMany("FollowingRelations")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OlympicWords.Data.User", "Following")
                        .WithMany("FollowerRelations")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("OlympicWords.Data.User", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("FollowerRelations");

                    b.Navigation("FollowingRelations");

                    b.Navigation("Picture");
                });
#pragma warning restore 612, 618
        }
    }
}
